{
  VTFLib
  Copyright (C) 2005-2011 Neil Jedrzejewski & Ryan Gregg
  Delphi header translation by Gage Moorhead
  
  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later
  version.
}

unit VTFLib;

interface

uses Winapi.Windows;

//
// External DLL names
//
const
  VTFLib1 = 'VTFLib.dll';

//
// Fundamental types used by VTFLib header
//
type vlBool = ByteBool;
type vlChar = ShortInt;
type vlPChar = PChar;
type vlByte = Byte;
type vlPByte = PByte;
type vl2PByte = ^PByte;
type vlShort = SmallInt;
type vlUShort = Word;
type vlInt = Integer;
type vlUInt = Cardinal;
type vlPUInt = PCardinal;
type vlLong = Integer;
type vlULong = Cardinal;
type vlSingle = Single;
type vlPSingle = PSingle;
type vlDouble = Double;
//type vlVoid = [nothing]

type vlFloat = vlSingle;

{ TODO: defines need translating! }

//
// Macro translations
//
function MakeVTFRSRCID(A, B, C: vlByte): DWORD;
function MakeVTFRSRCIDF(A, B, C, D: vlByte): DWORD;

//
// Enumerations
//

type TVTFLibOption = DWORD;
const
  VTFLIB_DXT_QUALITY = 0;

  VTFLIB_LUMINANCE_WEIGHT_R = 1;
  VTFLIB_LUMINANCE_WEIGHT_G = 2;
  VTFLIB_LUMINANCE_WEIGHT_B = 3;

  VTFLIB_BLUESCREEN_MASK_R = 4;
  VTFLIB_BLUESCREEN_MASK_G = 5;
  VTFLIB_BLUESCREEN_MASK_B = 6;

  VTFLIB_BLUESCREEN_CLEAR_R = 7;
  VTFLIB_BLUESCREEN_CLEAR_G = 8;
  VTFLIB_BLUESCREEN_CLEAR_B = 9;

  VTFLIB_FP16_HDR_KEY = 10;
  VTFLIB_FP16_HDR_SHIFT = 11;
  VTFLIB_FP16_HDR_GAMMA = 12;

  VTFLIB_UNSHARPEN_RADIUS = 13;
  VTFLIB_UNSHARPEN_AMOUNT = 14;
  VTFLIB_UNSHARPEN_THRESHOLD = 15;

  VTFLIB_XSHARPEN_STRENGTH = 16;
  VTFLIB_XSHARPEN_THRESHOLD = 17;

  VTFLIB_VMT_PARSE_MODE = 18;

type TVTFImageFormat = DWORD;
const
  IMAGE_FORMAT_RGBA8888 = 0;
  IMAGE_FORMAT_ABGR8888 = 1;
  IMAGE_FORMAT_RGB888 = 2;
  IMAGE_FORMAT_BGR888 = 3;
  IMAGE_FORMAT_RGB565 = 4;
  IMAGE_FORMAT_I8 = 5;
  IMAGE_FORMAT_IA88 = 6;
  IMAGE_FORMAT_P8 = 7;
  IMAGE_FORMAT_A8 = 8;
  IMAGE_FORMAT_RGB888_BLUESCREEN = 9;
  IMAGE_FORMAT_BGR888_BLUESCREEN = 10;
  IMAGE_FORMAT_ARGB8888 = 11;
  IMAGE_FORMAT_BGRA8888 = 12;
  IMAGE_FORMAT_DXT1 = 13;
  IMAGE_FORMAT_DXT3 = 14;
  IMAGE_FORMAT_DXT5 = 15;
  IMAGE_FORMAT_BGRX8888 = 16;
  IMAGE_FORMAT_BGR565 = 17;
  IMAGE_FORMAT_BGRX5551 = 18;
  IMAGE_FORMAT_BGRA4444 = 19;
  IMAGE_FORMAT_DXT1_ONEBITALPHA = 20;
  IMAGE_FORMAT_BGRA5551 = 21;
  IMAGE_FORMAT_UV88 = 22;
  IMAGE_FORMAT_UVWQ8888 = 23;
  IMAGE_FORMAT_RGBA16161616F = 24;
  IMAGE_FORMAT_RGBA16161616 = 25;
  IMAGE_FORMAT_UVLX8888 = 26;
  IMAGE_FORMAT_R32F = 27;
  IMAGE_FORMAT_RGB323232F = 28;
  IMAGE_FORMAT_RGBA32323232F = 29;
  IMAGE_FORMAT_NV_DST16 = 30;
  IMAGE_FORMAT_NV_DST24 = 31;      
  IMAGE_FORMAT_NV_INTZ = 32;
  IMAGE_FORMAT_NV_RAWZ = 33;
  IMAGE_FORMAT_ATI_DST16 = 34;
  IMAGE_FORMAT_ATI_DST24 = 35;
  IMAGE_FORMAT_NV_NULL = 36;
  IMAGE_FORMAT_ATI2N = 37;
  IMAGE_FORMAT_ATI1N = 38;
  IMAGE_FORMAT_COUNT = 39;
  IMAGE_FORMAT_NONE = -1;

type TVTFImageFlag = DWORD;
const
  TEXTUREFLAGS_POINTSAMPLE                               = $00000001;
  TEXTUREFLAGS_TRILINEAR                                 = $00000002;
  TEXTUREFLAGS_CLAMPS                                    = $00000004;
  TEXTUREFLAGS_CLAMPT                                    = $00000008;
  TEXTUREFLAGS_ANISOTROPIC                               = $00000010;
  TEXTUREFLAGS_HINT_DXT5                                 = $00000020;
  TEXTUREFLAGS_SRGB                                      = $00000040; // Originally internal to VTex as TEXTUREFLAGS_NOCOMPRESS.
  TEXTUREFLAGS_DEPRECATED_NOCOMPRESS                     = $00000040;
  TEXTUREFLAGS_NORMAL                                    = $00000080;
  TEXTUREFLAGS_NOMIP                                     = $00000100;
  TEXTUREFLAGS_NOLOD                                     = $00000200;
  TEXTUREFLAGS_MINMIP                                    = $00000400;
  TEXTUREFLAGS_PROCEDURAL                                = $00000800;
  TEXTUREFLAGS_ONEBITALPHA                               = $00001000; //!< Automatically generated by VTex.
  TEXTUREFLAGS_EIGHTBITALPHA                             = $00002000; //!< Automatically generated by VTex.
  TEXTUREFLAGS_ENVMAP                                    = $00004000;
  TEXTUREFLAGS_RENDERTARGET                              = $00008000;
  TEXTUREFLAGS_DEPTHRENDERTARGET                         = $00010000;
  TEXTUREFLAGS_NODEBUGOVERRIDE                           = $00020000;
  TEXTUREFLAGS_SINGLECOPY                                = $00040000;
  TEXTUREFLAGS_UNUSED0                                   = $00080000; //!< Originally internal to VTex as TEXTUREFLAGS_ONEOVERMIPLEVELINALPHA.
  TEXTUREFLAGS_DEPRECATED_ONEOVERMIPLEVELINALPHA         = $00080000;
  TEXTUREFLAGS_UNUSED1                                   = $00100000; //!< Originally internal to VTex as TEXTUREFLAGS_PREMULTCOLORBYONEOVERMIPLEVEL.
  TEXTUREFLAGS_DEPRECATED_PREMULTCOLORBYONEOVERMIPLEVEL  = $00100000;
  TEXTUREFLAGS_UNUSED2                                   = $00200000; //!< Originally internal to VTex as TEXTUREFLAGS_NORMALTODUDV.
  TEXTUREFLAGS_DEPRECATED_NORMALTODUDV                   = $00200000;
  TEXTUREFLAGS_UNUSED3                                   = $00400000; //!< Originally internal to VTex as TEXTUREFLAGS_ALPHATESTMIPGENERATION.
  TEXTUREFLAGS_DEPRECATED_ALPHATESTMIPGENERATION         = $00400000;
  TEXTUREFLAGS_NODEPTHBUFFER                             = $00800000;
  TEXTUREFLAGS_UNUSED4                                   = $01000000; //!< Originally internal to VTex as TEXTUREFLAGS_NICEFILTERED.
  TEXTUREFLAGS_DEPRECATED_NICEFILTERED                   = $01000000;
  TEXTUREFLAGS_CLAMPU                                    = $02000000;
  TEXTUREFLAGS_VERTEXTEXTURE                             = $04000000;
  TEXTUREFLAGS_SSBUMP                                    = $08000000;
  TEXTUREFLAGS_UNUSED5                                   = $10000000; //!< Originally TEXTUREFLAGS_UNFILTERABLE_OK.
  TEXTUREFLAGS_DEPRECATED_UNFILTERABLE_OK                = $10000000;
  TEXTUREFLAGS_BORDER                                    = $20000000;
  TEXTUREFLAGS_DEPRECATED_SPECVAR_RED                    = $40000000;
  TEXTUREFLAGS_DEPRECATED_SPECVAR_ALPHA                  = $80000000;
  TEXTUREFLAGS_LAST                                      = $20000000;
  TEXTUREFLAGS_COUNT                                     = 30;

// Cubemap face indices
//---------------------
type TVTFCubeMapFace = DWORD;
const
  CUBEMAP_FACE_RIGHT = 0;     // +x
  CUBEMAP_FACE_LEFT = 1;      // -x
  CUBEMAP_FACE_BACK = 2;      // +y
  CUBEMAP_FACE_FRONT = 3;      // -y
  CUBEMAP_FACE_UP = 4;      // +z
  CUBEMAP_FACE_DOWN = 5;      // -z
  CUBEMAP_FACE_SPHERE_MAP = 6;    // fall back
  CUBEMAP_FACE_COUNT = 7;

type TVTFMipmapFilter = DWORD;
const
  MIPMAP_FILTER_POINT = 0;
  MIPMAP_FILTER_BOX = 1;
  MIPMAP_FILTER_TRIANGLE = 2;
  MIPMAP_FILTER_QUADRATIC = 3;
  MIPMAP_FILTER_CUBIC = 4;
  MIPMAP_FILTER_CATROM = 5;
  MIPMAP_FILTER_MITCHELL = 6;
  MIPMAP_FILTER_GAUSSIAN = 7;
  MIPMAP_FILTER_SINC = 8;
  MIPMAP_FILTER_BESSEL = 9;
  MIPMAP_FILTER_HANNING = 10;
  MIPMAP_FILTER_HAMMING = 11;
  MIPMAP_FILTER_BLACKMAN = 12;
  MIPMAP_FILTER_KAISER = 13;
  MIPMAP_FILTER_COUNT = 14;

type TVTFSharpenFilter = DWORD;
const
  SHARPEN_FILTER_NONE = 0;
  SHARPEN_FILTER_NEGATIVE = 1;
  SHARPEN_FILTER_LIGHTER = 2;
  SHARPEN_FILTER_DARKER = 3;
  SHARPEN_FILTER_CONTRASTMORE = 4;
  SHARPEN_FILTER_CONTRASTLESS = 5;
  SHARPEN_FILTER_SMOOTHEN = 6;
  SHARPEN_FILTER_SHARPENSOFT = 7;
  SHARPEN_FILTER_SHARPENMEDIUM = 8;
  SHARPEN_FILTER_SHARPENSTRONG = 9;
  SHARPEN_FILTER_FINDEDGES = 10;
  SHARPEN_FILTER_CONTOUR = 11;
  SHARPEN_FILTER_EDGEDETECT = 12;
  SHARPEN_FILTER_EDGEDETECTSOFT = 13;
  SHARPEN_FILTER_EMBOSS = 14;
  SHARPEN_FILTER_MEANREMOVAL = 15;
  SHARPEN_FILTER_UNSHARP = 16;
  SHARPEN_FILTER_XSHARPEN = 17;
  SHARPEN_FILTER_WARPSHARP = 18;
  SHARPEN_FILTER_COUNT = 19;

type TVTFDXTQuality = DWORD;
const
  DXT_QUALITY_LOW = 0;
  DXT_QUALITY_MEDIUM = 1;
  DXT_QUALITY_HIGH = 2;
  DXT_QUALITY_HIGHEST = 3;
  DXT_QUALITY_COUNT = 4;

type TVTFKernelFilter = DWORD;
const
  KERNEL_FILTER_4X = 0;
  KERNEL_FILTER_3X3 = 1;
  KERNEL_FILTER_5X5 = 2;
  KERNEL_FILTER_7X7 = 3;
  KERNEL_FILTER_9X9 = 4;
  KERNEL_FILTER_DUDV = 5;
  KERNEL_FILTER_COUNT = 6;

type TVTFHeightConversionMethod = DWORD;
const
  HEIGHT_CONVERSION_METHOD_ALPHA = 0;
  HEIGHT_CONVERSION_METHOD_AVERAGE_RGB = 1;
  HEIGHT_CONVERSION_METHOD_BIASED_RGB = 2;
  HEIGHT_CONVERSION_METHOD_RED = 3;
  HEIGHT_CONVERSION_METHOD_GREEN = 4;
  HEIGHT_CONVERSION_METHOD_BLUE = 5;
  HEIGHT_CONVERSION_METHOD_MAX_RGB = 6;
  HEIGHT_CONVERSION_METHOD_COLORSPACE = 7;
  //HEIGHT_CONVERSION_METHOD_NORMALIZE
  HEIGHT_CONVERSION_METHOD_COUNT = 8;

type TVTFNormalAlphaResult = DWORD;
const
  NORMAL_ALPHA_RESULT_NOCHANGE = 0;
  NORMAL_ALPHA_RESULT_HEIGHT = 1;
  NORMAL_ALPHA_RESULT_BLACK = 2;
  NORMAL_ALPHA_RESULT_WHITE = 3;
  NORMAL_ALPHA_RESULT_COUNT = 4;

type TVTFResizeMethod = DWORD;
const
  RESIZE_NEAREST_POWER2 = 0;
  RESIZE_BIGGEST_POWER2 = 1;
  RESIZE_SMALLEST_POWER2 = 2;
  RESIZE_SET = 3;
  RESIZE_COUNT = 4;

type TVTFResourceEntryTypeFlag = DWORD;
const
  RSRCF_HAS_NO_DATA_CHUNK = $02;

type TVTFResourceEntryType = DWORD;
const
  VTF_LEGACY_RSRC_LOW_RES_IMAGE = $00000001; //$01, 0, 0
	VTF_LEGACY_RSRC_IMAGE = $00000030; //$30, 0, 0
	VTF_RSRC_SHEET = $00000010; //$10, 0, 0
	VTF_RSRC_CRC = $02435243; //'C', 'R', 'C', RSRC_HAS_NO_DATA_CHUNK
	VTF_RSRC_TEXTURE_LOD_SETTINGS = $02444F4C; //'L', 'O', 'D', RSRC_HAS_NO_DATA_CHUNK
	VTF_RSRC_TEXTURE_SETTINGS_EX = $024F5354; //'T', 'S', 'O', RSRCF_HAS_NO_DATA_CHUNK
	VTF_RSRC_KEY_VALUE_DATA = $0044564B; //'K', 'V', 'D'
	VTF_RSRC_MAX_DICTIONARY_ENTRIES = 32;

type TVTFParseMode = DWORD;
const
  PARSE_MODE_STRICT = 0;
  PARSE_MODE_LOOSE = 1;
  PARSE_MODE_COUNT = 2;

type TVMTNodeType = DWORD;
const
  NODE_TYPE_GROUP = 0;
  NODE_TYPE_GROUP_END = 1;
  NODE_TYPE_STRING = 2;
  NODE_TYPE_INTEGER = 3;
  NODE_TYPE_SINGLE = 4;
  NODE_TYPE_COUNT = 5;

//
// Structures
//

type TSVTFImageFormatInfo = packed record
  lpName: vlPChar;
  uiBitsPerPixel: vlUInt;
  uiBytesPerPixel: vlUInt;
  uiRedBitsPerPixel: vlUInt;
  uiGreenBitsPerPixel: vlUInt;
  uiBlueBitsPerPixel: vlUInt;
  uiAlphaBitsPerPixel: vlUInt;
  bIsCompressed: vlBool;
  bIsSupported: vlBool;
end;

type TSVTFCreateOptions = packed record
  uiVersion: vlUInt;
  ImageFormat: TVTFImageFormat;

  uiFlags: vlUInt;
  uiStartFrame: vlUInt;
  sBumpScale: vlSingle;
  sReflectivity: array[0..2] of vlSingle;

  bMipmaps: vlBool;
  MipmapFilter: TVTFMipmapFilter;
  MipmapSharpenFilter: TVTFSharpenFilter;

  bThumbnail: vlBool;
  bReflectivity: vlBool;

  bResize: vlBool;
  ResizeMethod: TVTFResizeMethod;
  ResizeFilter: TVTFMipmapFilter;
  ResizeSharpenFilter: TVTFSharpenFilter;
  uiResizeWidth: vlUInt;
  uiResizeHeight: vlUInt;

  bResizeClamp: vlBool;
  uiResizeClampWidth: vlUInt;
  uiResizeClampHeight: vlUInt;

  bGammaCorrection: vlBool;
  sGammaCorrection: vlSingle;

  bNormalMap: vlBool;
  KernelFilter: TVTFKernelFilter;
  HeightConversionMethod: TVTFHeightConversionMethod;
  NormalAlphaResult: TVTFNormalAlphaResult;
  bNormalMinimumZ: vlByte;
  sNormalScale: vlSingle;
  bNormalWrap: vlBool;
  bNormalInvertX: vlBool;
  bNormalInvertY: vlBool;
  bNormalInvertZ: vlBool;

  bSphereMap: vlBool;
end;

type SVTFTextureLODControlResource = packed record
  ResolutionClampU: vlByte;
  ResolutionClampV: vlByte;
  Padding: array[0..1] of vlByte;
end;

type TVLProc = DWORD;
const
  PROC_READ_CLOSE = 0;
  PROC_READ_OPEN = 1;
  PROC_READ_READ = 2;
  PROC_READ_SEEK = 3;
  PROC_READ_TELL = 4;
  PROC_READ_SIZE = 5;
  PROC_WRITE_CLOSE = 6;
  PROC_WRITE_OPEN = 7;
  PROC_WRITE_WRITE = 8;
  PROC_WRITE_SEEK = 9;
  PROC_WRITE_SIZE = 10;
  PROC_WRITE_TELL = 11;
  PROC_COUNT = 12;

type TVLSeekMode = DWORD;
const
  SEEK_MODE_BEGIN = 0;
  SEEK_MODE_CURRENT = 1;
  SEEK_MODE_END = 2;

/////////////////////////////////////////////////
///  Pointer Types  /////////////////////////////
/////////////////////////////////////////////////

type PSVTFCreateOptions = ^TSVTFCreateOptions;
type PSVTFImageFormatInfo = ^TSVTFImageFormatInfo;

/////////////////////////////////////////////////
///  C Functions  ///////////////////////////////
/////////////////////////////////////////////////

//
// VTFLib
//

function vlGetVersion: vlUInt; cdecl;
function vlGetVersionString: vlPChar; cdecl;

function vlGetLastError: vlPChar; cdecl;

function vlInitialize: vlBool; cdecl;
procedure vlShutdown; cdecl;

function vlGetBoolean(Option: TVTFLibOption): vlBool; cdecl;
procedure vlSetBoolean(Option: TVTFLibOption; bValue: vlBool); cdecl;

function vlGetInteger(Option: TVTFLibOption): vlInt; cdecl;
procedure vlSetInteger(Option: TVTFLibOption; iValue: vlInt); cdecl;

function vlGetFloat(Option: TVTFLibOption): vlSingle; cdecl;
procedure vlSetFloat(Option: TVTFLibOption; sValue: vlSingle); cdecl;

//
// Proc
//

procedure vlSetProc(Proc: TVLProc; pProc: Pointer); cdecl;
function vlGetProc(Proc: TVLProc): Pointer; cdecl;

//
// Memory management routines.
//

function vlImageIsBound: vlBool; cdecl;
function vlBindImage(uiImage: vlUInt): vlBool; cdecl;

function vlCreateImage(uiImage: vlPUInt): vlBool; cdecl;
procedure vlDeleteImage(uiImage: vlUInt); cdecl;

//
// Library routines.  (Basically class wrappers.)
//

procedure vlImageCreateDefaultCreateStructure(VTFCreateOptions: PSVTFCreateOptions); cdecl;

function vlImageCreate(uiWidth, uiHeight, uiFrames, uiFaces, uiSlices: vlUInt; ImageFormat: TVTFImageFormat; bThumbnail, bNullImageData: vlBool): vlBool; cdecl;
function vlImageCreateSingle(uiWidth, uiHeight: vlUInt; lpImageDataRGBA8888: vlPByte; VTFCreateOptions: PSVTFCreateOptions): vlBool; cdecl;
function vlImageCreateMultiple(uiWidth, uiHeight, uiFrames, uiFaces, uiSlices: vlUInt; lpImageDataRGBA8888: vl2PByte; VTFCreateOptions: PSVTFCreateOptions): vlBool; cdecl;
procedure vlImageDestroy; cdecl;

function vlImageIsLoaded: vlBool; cdecl;

function vlImageLoad(cFileName: vlPChar; bHeaderOnly: vlBool): vlBool; cdecl;
function vlImageLoadLump(lpData: Pointer; uiBufferSize: vlUInt; bHeaderOnly: vlBool): vlBool; cdecl;
function vlImageLoadProc(pUserData: Pointer; bHeaderOnly: vlBool): vlBool; cdecl;

function vlImageSave(vlChar: vlPChar): vlBool; cdecl;
function vlImageSaveLump(lpData: Pointer; uiBufferSize: vlUInt; uiSize: vlPUInt): vlBool; cdecl;
function vlImageSaveProc(pUserData: Pointer): vlBool; cdecl;

//
// Image routines.
//

function vlImageGetHasImage: vlUInt; cdecl;

function vlImageGetMajorVersion: vlUInt; cdecl;
function vlImageGetMinorVersion: vlUInt; cdecl;
function vlImageGetSize: vlUInt; cdecl;

function vlImageGetWidth: vlUInt; cdecl;
function vlImageGetHeight: vlUInt; cdecl;
function vlImageGetDepth: vlUInt; cdecl;

function vlImageGetFrameCount: vlUInt; cdecl;
function vlImageGetFaceCount: vlUInt; cdecl;
function vlImageGetMipmapCount: vlUInt; cdecl;

function vlImageGetStartFrame: vlUInt; cdecl;
procedure vlImageSetStartFrame(uiStartFrame: vlUInt); cdecl;

function vlImageGetFlags: vlUInt; cdecl;
procedure vlImageSetFlags(uiFlags: vlUInt); cdecl;

function vlImageGetFlag(ImageFlag: TVTFImageFlag): vlBool; cdecl;
procedure vlImageSetFlag(ImageFlag: TVTFImageFlag; bState: vlBool); cdecl;

function vlImageGetBumpmapScale: vlSingle; cdecl;
procedure vlImageSetBumpmapScale(sBumpmapScale: vlSingle); cdecl;

procedure vlImageGetReflectivity(sX, sY, sZ: vlPSingle); cdecl;
procedure vlImageSetReflectivity(sX, sY, sZ: vlSingle); cdecl;

function vlImageGetFormat: TVTFImageFormat; cdecl;

function vlImageGetData(uiFrame, uiFace, uiSlice, uiMipmapLevel: vlUInt): vlPByte; cdecl;
procedure vlImageSetData(uiFrame, uiFace, uiSlice, uiMipmapLevel: vlUInt; lpData: vlPByte); cdecl;

//
// Thumbnail routines.
//

function vlImageGetHasThumbnail: vlBool; cdecl;

function vlImageGetThumbnailWidth: vlUInt; cdecl;
function vlImageGetThumbnailHeight: vlUInt; cdecl;

function vlImageGetThumbnailFormat: TVTFImageFormat; cdecl;

function vlImageGetThumbnailData: vlPByte; cdecl;
procedure vlImageSetThumbnailData(lpData: vlPByte); cdecl;

//
// Resource routines.
//

function vlImageGetSupportsResources: vlBool; cdecl;

function vlImageGetResourceCount: vlUInt; cdecl;
function vlImageGetResourceType(uiIndex: vlUInt): vlUInt; cdecl;
function vlImageGetHasResource(uiType: vlUInt): vlBool; cdecl;

function vlImageGetResourceData(uiType: vlUInt; uiSize: vlPUInt): Pointer; cdecl;
function vlImageSetResourceData(uiType, uiSize: vlUInt; lpData: Pointer): Pointer; cdecl;

//
// Helper rountines.
//

function vlImageGenerateMipmaps(uiFace, uiFrame: vlUInt; MipmapFilter: TVTFMipmapFilter; SharpenFilter: TVTFSharpenFilter): vlBool; cdecl;
function vlImageGenerateAllMipmaps(MipmapFilter: TVTFMipmapFilter; SharpenFilter: TVTFSharpenFilter): vlBool; cdecl;

function vlImageGenerateThumbnail: vlBool; cdecl;

function vlImageGenerateNormalMap(uiFrame: vlUInt; KernelFilter: TVTFKernelFilter; HeightConversionMethod: TVTFHeightConversionMethod; NormalAlphaResult: TVTFNormalAlphaResult): vlBool; cdecl;
function vlImageGenerateAllNormalMaps(KernelFilter: TVTFKernelFilter; HeightConversionMethod: TVTFHeightConversionMethod; NormalAlphaResult: TVTFNormalAlphaResult): vlBool; cdecl;

function vlImageGenerateSphereMap: vlBool; cdecl;

function vlImageComputeReflectivity: vlBool; cdecl;

//
// Conversion routines.
//

function vlImageGetImageFormatInfo(ImageFormat: TVTFImageFormat): PSVTFImageFormatInfo; cdecl;
function vlImageGetImageFormatInfoEx(ImageFormat: TVTFImageFormat; ImageFormatInfo: PSVTFImageFormatInfo): vlBool; cdecl;

function vlImageComputeImageSize(uiWidth, uiHeight, uiDepth, uiMipmaps: vlUInt; ImageFormat: TVTFImageFormat): vlUInt; cdecl;

function vlImageComputeMipmapCount(uiWidth, uiHeight, uiDepth: vlUInt): vlUInt; cdecl;
procedure vlImageComputeMipmapDimensions(uiWidth, uiHeight, uiDepth, uiMipmapLevel: vlUInt; uiMipmapWidth, uiMipmapHeight, uiMipmapDepth: vlPUInt); cdecl;
function vlImageComputeMipmapSize(uiWidth, uiHeight, uiDepth, uiMipmapLevel: vlUInt; ImageFormat: TVTFImageFormat): UInt; cdecl;

function vlImageConvertToRGBA8888(lpSource, lpDest: vlPByte; uiWidth, uiHeight: vlUInt; SourceFormat: TVTFImageFormat): vlBool; cdecl;
function vlImageConvertFromRGBA8888(lpSource, lpDest: vlPByte; uiWidth, uiHeight: vlUInt; DestFormat: TVTFImageFormat): vlBool; cdecl;

function vlImageConvert(lpSource, lpDest: vlPByte; uiWidth, uiHeight: vlUInt; SourceFormat, DestFormat: TVTFImageFormat): vlBool; cdecl;

function vlImageConvertToNormalMap(lpSourceRGBA8888, lpDestRGBA8888: vlPByte; uiWidth, uiHeight: vlUInt; KernelFilter: TVTFKernelFilter; HeightConversionMethod: TVTFHeightConversionMethod; NormalAlphaResult: TVTFNormalAlphaResult; bMinimumZ: vlByte; sScale: vlSingle; bWrap, bInvertX, bInvertY: vlBool): vlBool; cdecl;

function vlImageResize(lpSourceRGBA8888, lpDestRGBA8888: vlPByte; uiSourceWidth, uiSourceHeight, uiDestWidth, uiDestHeight: vlUInt; ResizeFilter: TVTFMipmapFilter; SharpenFilter: TVTFSharpenFilter): vlBool; cdecl;

procedure vlImageCorrectImageGamma(lpImageDataRGBA8888: vlPByte; uiWidth, uiHeight: vlUInt; sGammaCorrection: vlSingle); cdecl;
procedure vlImageComputeImageReflectivity(lpImageDataRGBA8888: vlPByte; uiWidth, uiHeight: vlUInt; sX, sY, sZ: vlPSingle); cdecl;

procedure vlImageFlipImage(lpImageDataRGBA8888: vlPByte; uiWidth, uiHeight: vlUInt); cdecl;
procedure vlImageMirrorImage(lpImageDataRGBA8888: vlPByte; uiWidth, uiHeight: vlUInt); cdecl;

//
// Memory management routines.
//

function vlMaterialIsBound: vlBool; cdecl;
function vlBindMaterial(uiMaterial: vlUInt): vlBool; cdecl;

function vlCreateMaterial(uiMaterial: vlPUInt): vlBool; cdecl;
procedure vlDeleteMaterial(uiMaterial: vlUInt); cdecl;

//
// Library routines.  (Basically class wrappers.)
//

function vlMaterialCreate(cRoot: vlPChar): vlBool; cdecl;
procedure vlMaterialDestroy; cdecl;

function vlMaterialIsLoaded: vlBool; cdecl;

function vlMaterialLoad(cFileName: vlPChar): vlBool; cdecl;
function vlMaterialLoadLump(lpData: Pointer; uiBufferSize: vlUInt): vlBool; cdecl;
function vlMaterialLoadProc(pUserData: Pointer): vlBool; cdecl;

function vlMaterialSave(cFileName: vlPChar): vlBool; cdecl;
function vlMaterialSaveLump(lpData: Pointer; uiBufferSize: vlUInt; uiSize: vlPUInt): vlBool; cdecl;
function vlMaterialSaveProc(pUserData: Pointer): vlBool; cdecl;

//
// Node routines.
//

function vlMaterialGetFirstNode: vlBool; cdecl;
function vlMaterialGetLastNode: vlBool; cdecl;
function vlMaterialGetNextNode: vlBool; cdecl;
function vlMaterialGetPreviousNode: vlBool; cdecl;

function vlMaterialGetParentNode: vlBool; cdecl;
function vlMaterialGetChildNode(cName: vlPChar): vlBool; cdecl;

function vlMaterialGetNodeName: vlPChar; cdecl;
procedure vlMaterialSetNodeName(cName: vlPChar); cdecl;

function vlMaterialGetNodeType: TVMTNodeType; cdecl;

function vlMaterialGetNodeString: vlPChar; cdecl;
procedure vlMaterialSetNodeString(cValue: vlPChar); cdecl;

function vlMaterialGetNodeInteger: vlUInt; cdecl;
procedure vlMaterialSetNodeInteger(iValue: vlUInt); cdecl;

function vlMaterialGetNodeSingle: vlFloat; cdecl;
procedure vlMaterialSetNodeSingle(sValue: vlFloat); cdecl;

procedure vlMaterialAddNodeGroup(cName: vlPChar); cdecl;
procedure vlMaterialAddNodeString(cName, cValue: vlPChar); cdecl;
procedure vlMaterialAddNodeInteger(cName: vlPChar; iValue: vlUInt); cdecl;
procedure vlMaterialAddNodeSingle(cName: vlPChar; sValue: vlFloat); cdecl;

implementation

/////////////////////////////////////////////////
///  Macro functions  ///////////////////////////
/////////////////////////////////////////////////
function MakeVTFRSRCID(A, B, C: vlByte): DWORD;
begin
  Result := A or (B shl 8) or (C shl 16);
end;

function MakeVTFRSRCIDF(A, B, C, D: vlByte): DWORD;
begin
  Result := A or (B shl 8) or (C shl 16) or (D shl 24);
end;

/////////////////////////////////////////////////
///  External definitions  //////////////////////
/////////////////////////////////////////////////

function vlGetVersion; external VTFLib1 name 'vlGetVersion';
function vlGetVersionString; external VTFLib1 name 'vlGetVersionString';
function vlGetLastError; external VTFLib1 name 'vlGetLastError';
function vlInitialize; external VTFLib1 name 'vlInitialize';
procedure vlShutdown; external VTFLib1 name 'vlShutdown';
function vlGetBoolean; external VTFLib1 name 'vlGetBoolean';
procedure vlSetBoolean; external VTFLib1 name 'vlSetBoolean';
function vlGetInteger; external VTFLib1 name 'vlGetInteger';
procedure vlSetInteger; external VTFLib1 name 'vlSetInteger';
function vlGetFloat; external VTFLib1 name 'vlGetFloat';
procedure vlSetFloat; external VTFLib1 name 'vlSetFloat';
procedure vlSetProc; external VTFLib1 name 'vlSetProc';
function vlGetProc; external VTFLib1 name 'vlGetProc';
function vlImageIsBound; external VTFLib1 name 'vlImageIsBound';
function vlBindImage; external VTFLib1 name 'vlBindImage';
function vlCreateImage; external VTFLib1 name 'vlCreateImage';
procedure vlDeleteImage; external VTFLib1 name 'vlDeleteImage';
procedure vlImageCreateDefaultCreateStructure; external VTFLib1 name 'vlImageCreateDefaultCreateStructure';
function vlImageCreate; external VTFLib1 name 'vlImageCreate';
function vlImageCreateSingle; external VTFLib1 name 'vlImageCreateSingle';
function vlImageCreateMultiple; external VTFLib1 name 'vlImageCreateMultiple';
procedure vlImageDestroy; external VTFLib1 name 'vlImageDestroy';
function vlImageIsLoaded; external VTFLib1 name 'vlImageIsLoaded';
function vlImageLoad; external VTFLib1 name 'vlImageLoad';
function vlImageLoadLump; external VTFLib1 name 'vlImageLoadLump';
function vlImageLoadProc; external VTFLib1 name 'vlImageLoadProc';
function vlImageSave; external VTFLib1 name 'vlImageSave';
function vlImageSaveLump; external VTFLib1 name 'vlImageSaveLump';
function vlImageSaveProc; external VTFLib1 name 'vlImageSaveProc';
function vlImageGetHasImage; external VTFLib1 name 'vlImageGetHasImage';
function vlImageGetMajorVersion; external VTFLib1 name 'vlImageGetMajorVersion';
function vlImageGetMinorVersion; external VTFLib1 name 'vlImageGetMinorVersion';
function vlImageGetSize; external VTFLib1 name 'vlImageGetSize';
function vlImageGetWidth; external VTFLib1 name 'vlImageGetWidth';
function vlImageGetHeight; external VTFLib1 name 'vlImageGetHeight';
function vlImageGetDepth; external VTFLib1 name 'vlImageGetDepth';
function vlImageGetFrameCount; external VTFLib1 name 'vlImageGetFrameCount';
function vlImageGetFaceCount; external VTFLib1 name 'vlImageGetFaceCount';
function vlImageGetMipmapCount; external VTFLib1 name 'vlImageGetMipmapCount';
function vlImageGetStartFrame; external VTFLib1 name 'vlImageGetStartFrame';
procedure vlImageSetStartFrame; external VTFLib1 name 'vlImageSetStartFrame';
function vlImageGetFlags; external VTFLib1 name 'vlImageGetFlags';
procedure vlImageSetFlags; external VTFLib1 name 'vlImageSetFlags';
function vlImageGetFlag; external VTFLib1 name 'vlImageGetFlag';
procedure vlImageSetFlag; external VTFLib1 name 'vlImageSetFlag';
function vlImageGetBumpmapScale; external VTFLib1 name 'vlImageGetBumpmapScale';
procedure vlImageSetBumpmapScale; external VTFLib1 name 'vlImageSetBumpmapScale';
procedure vlImageGetReflectivity; external VTFLib1 name 'vlImageGetReflectivity';
procedure vlImageSetReflectivity; external VTFLib1 name 'vlImageSetReflectivity';
function vlImageGetFormat; external VTFLib1 name 'vlImageGetFormat';
function vlImageGetData; external VTFLib1 name 'vlImageGetData';
procedure vlImageSetData; external VTFLib1 name 'vlImageSetData';
function vlImageGetHasThumbnail; external VTFLib1 name 'vlImageGetHasThumbnail';
function vlImageGetThumbnailWidth; external VTFLib1 name 'vlImageGetThumbnailWidth';
function vlImageGetThumbnailHeight; external VTFLib1 name 'vlImageGetThumbnailHeight';
function vlImageGetThumbnailFormat; external VTFLib1 name 'vlImageGetThumbnailFormat';
function vlImageGetThumbnailData; external VTFLib1 name 'vlImageGetThumbnailData';
procedure vlImageSetThumbnailData; external VTFLib1 name 'vlImageSetThumbnailData';
function vlImageGetSupportsResources; external VTFLib1 name 'vlImageGetSupportsResources';
function vlImageGetResourceCount; external VTFLib1 name 'vlImageGetResourceCount';
function vlImageGetResourceType; external VTFLib1 name 'vlImageGetResourceType';
function vlImageGetHasResource; external VTFLib1 name 'vlImageGetHasResource';
function vlImageGetResourceData; external VTFLib1 name 'vlImageGetResourceData';
function vlImageSetResourceData; external VTFLib1 name 'vlImageSetResourceData';
function vlImageGenerateMipmaps; external VTFLib1 name 'vlImageGenerateMipmaps';
function vlImageGenerateAllMipmaps; external VTFLib1 name 'vlImageGenerateAllMipmaps';
function vlImageGenerateThumbnail; external VTFLib1 name 'vlImageGenerateThumbnail';
function vlImageGenerateNormalMap; external VTFLib1 name 'vlImageGenerateNormalMap';
function vlImageGenerateAllNormalMaps; external VTFLib1 name '';
function vlImageGenerateSphereMap; external VTFLib1 name 'vlImageGenerateSphereMap';
function vlImageComputeReflectivity; external VTFLib1 name 'vlImageComputeReflectivity';
function vlImageGetImageFormatInfo; external VTFLib1 name 'vlImageGetImageFormatInfo';
function vlImageGetImageFormatInfoEx; external VTFLib1 name 'vlImageGetImageFormatInfoEx';
function vlImageComputeImageSize; external VTFLib1 name 'vlImageComputeImageSize';
function vlImageComputeMipmapCount; external VTFLib1 name 'vlImageComputeMipmapCount';
procedure vlImageComputeMipmapDimensions; external VTFLib1 name 'vlImageComputeMipmapDimensions';
function vlImageComputeMipmapSize; external VTFLib1 name 'vlImageComputeMipmapSize';
function vlImageConvertToRGBA8888; external VTFLib1 name 'vlImageConvertToRGBA8888';
function vlImageConvertFromRGBA8888; external VTFLib1 name 'vlImageConvertFromRGBA8888';
function vlImageConvert; external VTFLib1 name 'vlImageConvert';
function vlImageConvertToNormalMap; external VTFLib1 name 'vlImageConvertToNormalMap';
function vlImageResize; external VTFLib1 name 'vlImageResize';
procedure vlImageCorrectImageGamma; external VTFLib1 name 'vlImageCorrectImageGamma';
procedure vlImageComputeImageReflectivity; external VTFLib1 name 'vlImageComputeImageReflectivity';
procedure vlImageFlipImage; external VTFLib1 name 'vlImageFlipImage';
procedure vlImageMirrorImage; external VTFLib1 name 'vlImageMirrorImage';
function vlMaterialIsBound; external VTFLib1 name 'vlMaterialIsBound';
function vlBindMaterial; external VTFLib1 name 'vlBindMaterial';
function vlCreateMaterial; external VTFLib1 name 'vlCreateMaterial';
procedure vlDeleteMaterial; external VTFLib1 name 'vlDeleteMaterial';
function vlMaterialCreate; external VTFLib1 name 'vlMaterialCreate';
procedure vlMaterialDestroy; external VTFLib1 name 'vlMaterialDestroy';
function vlMaterialIsLoaded; external VTFLib1 name 'vlMaterialIsLoaded';
function vlMaterialLoad; external VTFLib1 name 'vlMaterialLoad';
function vlMaterialLoadLump; external VTFLib1 name 'vlMaterialLoadLump';
function vlMaterialLoadProc; external VTFLib1 name 'vlMaterialLoadProc';
function vlMaterialSave; external VTFLib1 name 'vlMaterialSave';
function vlMaterialSaveLump; external VTFLib1 name 'vlMaterialSaveLump';
function vlMaterialSaveProc; external VTFLib1 name 'vlMaterialSaveProc';
function vlMaterialGetFirstNode; external VTFLib1 name 'vlMaterialGetFirstNode';
function vlMaterialGetLastNode; external VTFLib1 name 'vlMaterialGetLastNode';
function vlMaterialGetNextNode; external VTFLib1 name 'vlMaterialGetNextNode';
function vlMaterialGetPreviousNode; external VTFLib1 name 'vlMaterialGetPreviousNode';
function vlMaterialGetParentNode; external VTFLib1 name 'vlMaterialGetParentNode';
function vlMaterialGetChildNode; external VTFLib1 name 'vlMaterialGetChildNode';
function vlMaterialGetNodeName; external VTFLib1 name 'vlMaterialGetNodeName';
procedure vlMaterialSetNodeName; external VTFLib1 name 'vlMaterialSetNodeName';
function vlMaterialGetNodeType; external VTFLib1 name 'vlMaterialGetNodeType';
function vlMaterialGetNodeString; external VTFLib1 name 'vlMaterialGetNodeString';
procedure vlMaterialSetNodeString; external VTFLib1 name 'vlMaterialSetNodeString';
function vlMaterialGetNodeInteger; external VTFLib1 name 'vlMaterialGetNodeInteger';
procedure vlMaterialSetNodeInteger; external VTFLib1 name 'vlMaterialSetNodeInteger';
function vlMaterialGetNodeSingle; external VTFLib1 name 'vlMaterialGetNodeSingle';
procedure vlMaterialSetNodeSingle; external VTFLib1 name 'vlMaterialSetNodeSingle';
procedure vlMaterialAddNodeGroup; external VTFLib1 name 'vlMaterialAddNodeGroup';
procedure vlMaterialAddNodeString; external VTFLib1 name 'vlMaterialAddNodeString';
procedure vlMaterialAddNodeInteger; external VTFLib1 name 'vlMaterialAddNodeInteger';
procedure vlMaterialAddNodeSingle; external VTFLib1 name 'vlMaterialAddNodeSingle';

end.